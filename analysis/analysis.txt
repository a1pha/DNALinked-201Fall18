Rodrigo Araujo
Rea20
Abhishek Jadhav
Aj246

Question 1: are the benchmark timings for StringStrand consistent with the 
explanation below that the time to execute cutAndSplice is O(b^2S)? 

Benchmark Results:
dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringStrand:	            256	      4,800,471	0.754	1290
StringStrand:	            512	      4,965,591	0.763	1290
StringStrand:	          1,024	      5,295,831	0.793	1290
StringStrand:	          2,048	      5,956,311	0.893	1290
StringStrand:	          4,096	      7,277,271	1.109	1290
StringStrand:	          8,192	      9,919,191	1.544	1290
StringStrand:	         16,384	     15,203,031	2.498	1290
StringStrand:	         32,768	     25,770,711	4.311	1290
StringStrand:	         65,536	     46,906,071	8.501	1290
StringStrand:	        131,072	     89,176,791	15.143	1290
StringStrand:	        262,144	    173,718,231	28.529	1290
StringStrand:	        524,288	    342,801,111	54.979	1290
StringStrand:	      1,048,576	    680,966,871	107.184	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space

Yes, the benchmark timings for StringStrand are consistent with the explanation
that executing cutAndSplice is O(b^2S).

Question 2: are the benchmark timings for StringBuilderStrand consistent 
with the explanation below that the time to execute cutAndSplice is O(bS)?

Benchmark Results:
dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringBuilderStrand:	            256	      4,800,471	0.028	1290
StringBuilderStrand:	            512	      4,965,591	0.022	1290
StringBuilderStrand:	          1,024	      5,295,831	0.010	1290
StringBuilderStrand:	          2,048	      5,956,311	0.008	1290
StringBuilderStrand:	          4,096	      7,277,271	0.008	1290
StringBuilderStrand:	          8,192	      9,919,191	0.009	1290
StringBuilderStrand:	         16,384	     15,203,031	0.015	1290
StringBuilderStrand:	         32,768	     25,770,711	0.031	1290
StringBuilderStrand:	         65,536	     46,906,071	0.044	1290
StringBuilderStrand:	        131,072	     89,176,791	0.094	1290
StringBuilderStrand:	        262,144	    173,718,231	0.221	1290
StringBuilderStrand:	        524,288	    342,801,111	0.341	1290
StringBuilderStrand:	      1,048,576	    680,966,871	0.864	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space

Yes, the benchmark timings for StringBuilderStrand are consistent with the explanation
that executing cutAndSplice is O(bS).

Question 3: Explain why the time for LinkStrand does not change much at all
over all the runs in the benchmark program. Explain why you think memory is
exhausted at the specific strand size you see in your timings -- as compared
to exhaustion for String and StringBuilder. 

Benchmark Results:
dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
LinkStrand:	            256	      4,800,471	0.028	1290
LinkStrand:	            512	      4,965,591	0.021	1290
LinkStrand:	          1,024	      5,295,831	0.009	1290
LinkStrand:	          2,048	      5,956,311	0.006	1290
LinkStrand:	          4,096	      7,277,271	0.005	1290
LinkStrand:	          8,192	      9,919,191	0.005	1290
LinkStrand:	         16,384	     15,203,031	0.008	1290
LinkStrand:	         32,768	     25,770,711	0.004	1290
LinkStrand:	         65,536	     46,906,071	0.005	1290
LinkStrand:	        131,072	     89,176,791	0.006	1290
LinkStrand:	        262,144	    173,718,231	0.005	1290
LinkStrand:	        524,288	    342,801,111	0.006	1290
LinkStrand:	      1,048,576	    680,966,871	0.007	1290
LinkStrand:	      2,097,152	  1,357,298,391	0.005	1290
LinkStrand:	      4,194,304	  2,709,961,431	0.005	1290
LinkStrand:	      8,388,608	  5,415,287,511	0.004	1290
LinkStrand:	     16,777,216	 10,825,939,671	0.005	1290
LinkStrand:	     33,554,432	 21,647,243,991	0.008	1290
LinkStrand:	     67,108,864	 43,289,852,631	0.008	1290
LinkStrand:	    134,217,728	 86,575,069,911	0.008	1290
LinkStrand:	    268,435,456	173,145,504,471	0.007	1290
LinkStrand:	    536,870,912	346,286,373,591	0.005	1290
LinkStrand:	  1,073,741,824	692,568,111,831	0.008	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space

The time for LinkStrand does not change much because the time to execute
cutAndSplice is O(b). Linked Lists have the advantage of being able to
insert nodes anywhere within the list instantaneously because it can create
links without shifting everything down a place. We believe the memory exhausted 
at 692,568,111,831 because that was the physical limit of the memory allocation
as opposed to the other two (StringStrand and StringBuilderStrand) where the size
was ended sooner due to String and StringBuilders physical limitations. 

This is also due to the fact that LinkStrand doesn't store the strings in the someway StringStrand and StringBuilderStrand do, those store them in a a book-like fashion which takes more memory verses a pointer fashion.
